{
   "Resources": {
    "MetricforConsoleLoginWithoutMFA": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterPattern": "{ $.eventName = \"ConsoleLogin\" && $.additionalEventData.MFAUsed != \"Yes\" }",
                "LogGroupName": {
          "Ref": "CloudTrailLogGroup"
        },
        "MetricTransformations": [
          {
            "MetricValue": "1",
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "DetectLoginWithoutMFA"
          }
        ]
      }
    },
    "AlarmforConsoleLoginWithoutMFA": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "False",
        "AlarmDescription": "Alarms when user logs into console without MFA.",
        "AlarmActions": [
          {
            "Ref": "AlarmNotificationTopic"
          }
        ],
        "AlarmName": "ConsoleLogin-MFAUsed",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "MetricName": "DetectLoginWithoutMFA",
        "EvaluationPeriods": "1",
        "Namespace": "CloudTrailMetrics",
        "Period": "300",
        "Statistic": "Sum",
        "Threshold": "1"
      }
    },
    "IAMUnauthorizedAccessMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "CloudTrailLogGroup"
        },
        "FilterPattern": "{ ($.errorCode = \"*UnauthorizedOperation\") || ($.errorCode = \"AccessDenied*\") }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "IAMUnauthorizedAccessEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },
    "IAMUnauthorizedAccessAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "IAMUnauthorizedAccessAlarm",
        "AlarmDescription": "Alarms when Unauthorized user acess console or when a user is denied with access.",
        "AlarmActions": [
          {
            "Ref": "AlarmNotificationTopic"
          }
        ],
        "MetricName": "IAMUnauthorizedAccessEventCount",
        "Namespace": "CloudTrailMetrics",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "1",
        "Period": "300",
        "Statistic": "Sum",
        "Threshold": "1"
      }
    },
    "RootAccountLoginMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "CloudTrailLogGroup"
        },
        "FilterPattern": "{ $.userIdentity.type = \"Root\" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != \"AwsServiceEvent\" }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "RootAccountLoginEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },
    "RootAccountLoginAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "RootAccountLoginAlarm",
        "AlarmDescription": "Alarms when root (account) credentials are used..",
        "AlarmActions": [
          {
            "Ref": "AlarmNotificationTopic"
          }
        ],
        "MetricName": "RootAccountLoginEventCount",
        "Namespace": "CloudTrailMetrics",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "1",
        "Period": "300",
        "Statistic": "Sum",
        "Threshold": "1"
      }
    },
    "S3BucketpolicychangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "CloudTrailLogGroup"
        },
        "FilterPattern": "{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "S3BucketActivityEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },
    "S3BucketpolicychangesChangesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "CloudTrailSecurityGroupChanges",
        "AlarmDescription": "Alarms when an API call is made to create, update or delete a Security Group.",
        "AlarmActions": [
          {
            "Ref": "AlarmNotificationTopic"
          }
        ],
        "MetricName": "S3BucketActivityEventCount",
        "Namespace": "CloudTrailMetrics",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "1",
        "Period": "300",
        "Statistic": "Sum",
        "Threshold": "1"
      }
    },
    "GatewayChangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "CloudTrailLogGroup"
        },
        "FilterPattern": "{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "GatewayEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },
    "GatewayChangesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "CloudTrailGatewayChanges",
        "AlarmDescription": "Alarms when an API call is made to create, update or delete a Customer or Internet Gateway.",
        "AlarmActions": [
          {
            "Ref": "AlarmNotificationTopic"
          }
        ],
        "MetricName": "GatewayEventCount",
        "Namespace": "CloudTrailMetrics",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "1",
        "Period": "300",
        "Statistic": "Sum",
        "Threshold": "1"
      }
    },
    "VpcChangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "CloudTrailLogGroup"
        },
        "FilterPattern": "{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "VpcEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },
    "VpcChangesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "CloudTrailVpcChanges",
        "AlarmDescription": "Alarms when an API call is made to create, update or delete a VPC, VPC peering connection or VPC connection to classic.",
        "AlarmActions": [
          {
            "Ref": "AlarmNotificationTopic"
          }
        ],
        "MetricName": "VpcEventCount",
        "Namespace": "CloudTrailMetrics",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "1",
        "Period": "300",
        "Statistic": "Sum",
        "Threshold": "1"
      }
    },
    "CloudTrailChangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "CloudTrailLogGroup"
        },
        "FilterPattern": "{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "CloudTrailEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },
    "CloudTrailChangesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "CloudTrailChanges",
        "AlarmDescription": "Alarms when an API call is made to create, update or delete a CloudTrail trail, or to start or stop logging to a trail.",
        "AlarmActions": [
          {
            "Ref": "AlarmNotificationTopic"
          }
        ],
        "MetricName": "CloudTrailEventCount",
        "Namespace": "CloudTrailMetrics",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "1",
        "Period": "300",
        "Statistic": "Sum",
        "Threshold": "1"
      }
    },
    "RouteTableChangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterPattern": "{ $.eventName = \"CreateRoute\" || $.eventName = \"CreateRouteTable\" ||$.eventName = \"ReplaceRoute\" ||$.eventName = \"ReplaceRouteTableAssociation\" ||$.eventName = \"DeleteRouteTable\" ||$.eventName = \"DeleteRoute\" ||$.eventName = \"DisassociateRouteTable\" }",
        "LogGroupName": {
          "Ref": "CloudTrailLogGroup"
        },
        "MetricTransformations": [
          {
            "MetricValue": "1",
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "RouteTableChanges"
          }
        ]
      }
    },
    "AlarmforRouteTableChanges": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "False",
        "AlarmDescription": "Alarms when RouteTableChanges occur",
        "AlarmActions": [
          {
            "Ref": "AlarmNotificationTopic"
          }
        ],
        "AlarmName": "RouteTableChanges",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "MetricName": "RouteTableChanges",
        "EvaluationPeriods": "1",
        "Namespace": "CloudTrailMetrics",
        "Period": "300",
        "Statistic": "Sum",
        "Threshold": "1"
      }
    },
    "IAMPolicyChangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterPattern": "{($.eventName=\"DeleteGroupPolicy\")||($.eventName=\"DeleteRolePolicy\")||($.eventName=\"DeleteUserPolicy\")||($.eventName=\"PutGroupPolicy\")||($.eventName=\"PutRolePolicy\")||($.eventName=\"PutUserPolicy\")||($.eventName=\"CreatePolicy\")||($.eventName=\"DeletePolicy\")||($.eventName=\"CreatePolicyVersion\")||($.eventName=\"DeletePolicyVersion\")||($.eventName=\"AttachRolePolicy\")||($.eventName=\"DetachRolePolicy\")||($.eventName=\"AttachUserPolicy\")||($.eventName=\"DetachUserPolicy\")||($.eventName=\"AttachGroupPolicy\")||($.eventName=\"DetachGroupPolicy\")}",
        "LogGroupName": {
          "Ref": "CloudTrailLogGroup"
        },
        "MetricTransformations": [
          {
            "MetricValue": "1",
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "IAMPolicyChanges"
          }
        ]
      }
    },
    "AlarmforIAMPolicyChangesChanges": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "False",
        "AlarmDescription": "Alarms when IAM Policy Changes occur",
        "AlarmActions": [
          {
            "Ref": "AlarmNotificationTopic"
          }
        ],
        "AlarmName": "IAMPolicyChanges",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "MetricName": "IAMPolicyChanges",
        "EvaluationPeriods": "1",
        "Namespace": "CloudTrailMetrics",
        "Period": "300",
        "Statistic": "Sum",
        "Threshold": "1"
      }
    },
    "AlarmNotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "Email"
            },
            "Protocol": "email"
          }
        ]
      }
    }
  },
   "Parameters": {
    "CloudTrailLogGroup": {
      "Type": "String",
      "Description": "Enter CloudWatch Logs log group name. Default is aab-cloudtrail-logs"
    },
    "Email": {
      "Type": "String",
      "Description": "Email address to notify when an API activity has triggered an alarm"
    }
  }
}